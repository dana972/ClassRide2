<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Manage Trips</title>
  <style>
    .manage-trips-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .manage-trips-modal-content {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 300px;
      max-height: 90vh;
      overflow-y: auto;
    }
    .manage-trips-close {
      float: right;
      cursor: pointer;
    }
    .manage-trips-btn {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 15px;
      cursor: pointer;
      border-radius: 5px;
    }
    .manage-trips-btn:hover {
      background: #0056b3;
    }
    .manage-trips-destination-group {
      margin-top: 20px;
    }
    .manage-trips-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    .manage-trips-table th, .manage-trips-table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    .manage-trips-table th {
      background-color: #f2f2f2;
    }
    .trip-card {
      background-color: #e9f5ff;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      width: 160px;
      cursor: pointer;
      box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
      transition: background-color 0.2s;
    }
    .trip-card:hover {
      background-color: #d0eaff;
    }
    #trip-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin: 10px 0 20px;
    }
  </style>
</head>
<body>

<div id="manage-trips" class="content-section">
  <h3>Manage Trips for Tomorrow</h3>
  <p>Here is where you manage your trips for tomorrow.</p>

  <!-- ✅ Trip Cards -->
  <h3>Scheduled Trips</h3>
  <div id="trip-cards">
    <!-- Populated dynamically -->
  </div>

  <!-- ✅ Trip Details Modal -->
  <div id="tripDetailsModal" class="manage-trips-modal" style="display: none;">
    <div class="manage-trips-modal-content" style="width: 500px;">
      <span class="manage-trips-close" id="closeTripDetails">&times;</span>
      <h2>Trip Details</h2>
      <div id="tripDetailsContent">
        <!-- Populated dynamically -->
      </div>
    </div>
  </div>

  <!-- ✅ Create Trip Button -->
  <button id="openTripForm" class="manage-trips-btn">Create Trip</button>

  <!-- ✅ Trip Form Modal -->
  <div id="tripFormModal" class="manage-trips-modal" style="display: none;">
    <div class="manage-trips-modal-content">
      <span class="manage-trips-close" id="closeTripForm">&times;</span>
      <h2>Create a New Trip</h2>
      <form id="tripForm">
        <label for="bus">Select Bus:</label>
        <select id="bus" name="bus_id" required>
          <% buses.forEach(bus => { %>
            <option value="<%= bus.bus_id %>"><%= bus.bus_name %></option>
          <% }) %>
        </select>

        <label for="driver">Assign Driver:</label>
        <select id="driver" name="driver_phone" required>
          <% drivers.forEach(driver => { %>
            <option value="<%= driver.phone_number %>"><%= driver.full_name %></option>
          <% }) %>
        </select>

        <label for="destination">Destination:</label>
        <select id="destination" name="destination_id" required>
          <% destinations.forEach(destination => { %>
            <option value="<%= destination.destination_id %>"><%= destination.name %></option>
          <% }) %>
        </select>

        <label for="pickup_time">Pickup Time:</label>
        <input type="time" id="pickup_time" name="pickup_time" required>

        <label for="type">Trip Type:</label>
        <select id="type" name="type" required>
          <option value="morning">Morning</option>
          <option value="return">Return</option>
        </select>

        <label for="dropoff_time">Dropoff Time:</label>
        <input type="time" id="dropoff_time" name="dropoff_time" required>

        <button type="submit" class="manage-trips-btn">Submit</button>
      </form>
    </div>
  </div>

  <!-- ✅ Student Lists -->
  <h3>Students by Destination</h3>
  <div id="student-lists"></div>
</div>

<script>
  // 🔁 Show/Hide Trip Form Modal
  document.getElementById("openTripForm").addEventListener("click", () => {
    document.getElementById("tripFormModal").style.display = "flex";
  });
  document.getElementById("closeTripForm").addEventListener("click", () => {
    document.getElementById("tripFormModal").style.display = "none";
  });
  document.getElementById("closeTripDetails").addEventListener("click", () => {
    document.getElementById("tripDetailsModal").style.display = "none";
  });

  // ✅ Create Trip
  document.getElementById("tripForm").addEventListener("submit", async function (event) {
    event.preventDefault();
    const tripData = {
      bus_id: document.getElementById("bus").value,
      driver_phone: document.getElementById("driver").value,
      destination_id: document.getElementById("destination").value,
      pickup_time: document.getElementById("pickup_time").value,
      dropoff_time: document.getElementById("dropoff_time").value,
      type: document.getElementById("type").value
    };

    try {
      const response = await fetch('/owner/dashboard/trip', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(tripData)
      });

      const result = await response.json();

      if (response.ok) {
        alert(result.message);
        document.getElementById("tripFormModal").style.display = "none";
        document.getElementById("tripForm").reset();
        await loadTrips();
        await loadStudentLists();
      } else {
        alert(result.error || "Failed to create trip");
      }
    } catch (err) {
      console.error("Trip creation error:", err);
      alert("Error creating trip");
    }
  });

  // ✅ Load Trip Cards
  async function loadTrips() {
    try {
      const response = await fetch('/owner/dashboard/trips');
      const trips = await response.json();

      const container = document.getElementById('trip-cards');
      container.innerHTML = '';

      trips.forEach(trip => {
        const card = document.createElement('div');
        card.classList.add('trip-card');
        card.innerHTML = `
          <strong>${trip.type.toUpperCase()}</strong><br>
          Bus: ${trip.bus_id}<br>
          ${trip.pickup_time.slice(0,5)} - ${trip.dropoff_time.slice(0,5)}<br>
          <small>To: ${trip.destination_name}</small>
        `;
        card.onclick = () => showTripDetails(trip.trip_id);
        container.appendChild(card);
      });
    } catch (err) {
      console.error("Error loading trips:", err);
    }
  }

  // ✅ Load Trip Details
  async function showTripDetails(tripId) {
    try {
      const response = await fetch(`/owner/dashboard/trip/${tripId}`);
      const { trip, students } = await response.json();

      const container = document.getElementById('tripDetailsContent');
      container.innerHTML = `
        <p><strong>Bus:</strong> ${trip.bus_id}</p>
<p><strong>Driver:</strong> ${trip.driver_name}</p>
        <p><strong>Destination:</strong> ${trip.destination_name}</p>
        <p><strong>Type:</strong> ${trip.type}</p>
        <p><strong>Time:</strong> ${trip.pickup_time.slice(0,5)} → ${trip.dropoff_time.slice(0,5)}</p>
        <p><strong>Date:</strong> ${trip.date}</p>
        <hr>
        <h4>Students Assigned:</h4>
       <ul>
  ${students.length > 0 ? students.map(s => `
    <li>
      ${s.full_name}
      <button onclick="removeStudentFromTrip('${tripId}', '${s.phone_number}', this)" style="margin-left: 10px; color: red; cursor: pointer;">Remove</button>
    </li>
  `).join('') : '<li>No students assigned.</li>'}
</ul>

      `;

      document.getElementById("tripDetailsModal").style.display = "flex";
    } catch (err) {
      console.error("Failed to load trip details", err);
    }
  }

  // ✅ Load Students by Destination (already working)
  async function loadStudentLists() {
  try {
    const [studentsRes, tripsRes] = await Promise.all([
      fetch('/owner/dashboard/students-by-destination'),
      fetch('/owner/dashboard/trips')
    ]);

    const students = await studentsRes.json();
    const trips = await tripsRes.json();

    const grouped = {};
    students.forEach(s => {
      if (!grouped[s.destination_id]) {
        grouped[s.destination_id] = {
          destination_name: s.destination_name,
          students: []
        };
      }
      grouped[s.destination_id].students.push({
        student_name: s.full_name,
        phone_number: s.phone_number
      });
    });

    const container = document.getElementById('student-lists');
    container.innerHTML = '';

    for (const [destinationId, group] of Object.entries(grouped)) {
      const groupDiv = document.createElement('div');
      groupDiv.classList.add('manage-trips-destination-group');

      groupDiv.innerHTML = `
        <h4>${group.destination_name}</h4>
        <table class="manage-trips-table">
          <tr><th>Student Name</th><th>Assign to Trip</th></tr>
          ${group.students.map(student => `
            <tr>
              <td>${student.student_name}</td>
              <td>
                <select class="trip-select" data-student-id="${student.phone_number}" onchange="assignToTrip(this)">
                  <option value="">-- Select Trip --</option>
                  ${trips.map(trip => `
                    <option value="${trip.trip_id}">
                      ${trip.type.toUpperCase()} @ ${trip.pickup_time.slice(0,5)} → ${trip.destination_name}
                    </option>
                  `).join('')}
                </select>
              </td>
            </tr>
          `).join('')}
        </table>
      `;

      container.appendChild(groupDiv);
    }
  } catch (err) {
    console.error("Error loading students or trips:", err);
    document.getElementById('student-lists').innerHTML = `<p style="color: red;">Failed to load student list.</p>`;
  }
}

  async function assignToTrip(selectElement) {
  const trip_id = selectElement.value;
  const student_phone = selectElement.dataset.studentId;

  if (!trip_id) return;

  try {
    const res = await fetch('/owner/dashboard/assign-student', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ student_phone, trip_id })
    });

    const result = await res.json();

    if (res.ok) {
      alert(result.message);
      // Remove the student's row from the UI
      const row = selectElement.closest('tr');
      row.remove();
    } else {
      alert(result.error || 'Failed to assign student');
    }
  } catch (err) {
    console.error('Error assigning student:', err);
    alert('Error assigning student');
  }
}


async function removeStudentFromTrip(trip_id, student_phone, buttonEl) {
  if (!confirm("Are you sure you want to remove this student from the trip?")) return;

  try {
    const res = await fetch('/owner/dashboard/unassign-student', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ student_phone, trip_id })
    });

    const result = await res.json();

    if (res.ok) {
      alert(result.message);
      // Remove the <li> from the list
      const li = buttonEl.closest('li');
      li.remove();
      await loadStudentLists();

    } else {
      alert(result.error || 'Failed to remove student');
    }
  } catch (err) {
    console.error("Error removing student:", err);
    alert("Error removing student");
  }
}

  // ✅ Load everything on page load
  window.addEventListener('DOMContentLoaded', () => {
    loadTrips();
    loadStudentLists();
  });


  

</script>

</body>
</html>
